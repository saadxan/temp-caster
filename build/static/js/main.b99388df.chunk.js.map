{"version":3,"sources":["WeatherCard.js","App.js","reportWebVitals.js","index.js"],"names":["WeatherCard","props","state","temperature","cloudCover","humidity","precipitation","uvIndex","visibility","weatherCode","weatherDescription","localDate","realCity","updateCard","bind","currData","this","setState","getDate","split","date","Date","substring","toDateString","valueOf","className","React","Component","App","city","isLoading","card","createRef","handleSubmit","fetchCityWeather","event","preventDefault","FormData","target","get","document","getElementById","value","fetch","then","response","json","data","areaData","current","id","onSubmit","name","type","placeholder","ref","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.b99388df.chunk.js","sourcesContent":["import './WeatherCard.css';\nimport React from \"react\";\n\nclass WeatherCard extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            temperature : null,\n            cloudCover : null,\n            humidity : null,\n            precipitation : null,\n            uvIndex : null,\n            visibility : null,\n            weatherCode: null,\n            weatherDescription: null,\n            localDate: null,\n            realCity: \"Nowhere\"\n        }\n        this.updateCard = this.updateCard.bind(this);\n    }\n\n    updateCard(currData, realCity) {\n        this.setState({\n            temperature : currData[0][\"temp_F\"],\n            cloudCover : currData[0][\"cloudcover\"],\n            humidity : currData[0][\"humidity\"],\n            precipitation : currData[0][\"precipInches\"],\n            uvIndex : currData[0][\"uvIndex\"],\n            visibility : currData[0][\"visibilityMiles\"],\n            weatherCode: currData[0][\"weatherCode\"],\n            localDate: this.getDate(currData[0][\"localObsDateTime\"].split(\" \")[0]),\n            realCity: realCity\n        });\n    }\n\n    getDate(date) {\n        return new Date(date.substring(0, 4), date.substring(5, 7) - 1, date.substring(8, 10)).toDateString().valueOf();\n    }\n\n    render() {\n        return (\n            <div>\n                {this.state.realCity !== \"Nowhere\" && (\n                    <div>\n                        <h3>{this.state.realCity}</h3>\n                        <h6>{this.state.localDate}</h6>\n                        <div className=\"WeatherCard\">\n                            <div className=\"Box TemperatureBox\">\n                                <h5>{this.state.temperature} ÂºF</h5>\n                            </div>\n                            <div className=\"Box CloudCoverBox\">\n                                <h5>{this.state.cloudCover}%</h5>\n                            </div>\n                            <div className=\"Box HumidityBox\">\n                                <h5>{this.state.humidity} %rh</h5>\n                            </div>\n                            <div className=\"Box PrecipitationBox\">\n                                <h5>{this.state.precipitation} in</h5>\n                            </div>\n                            <div className=\"Box UVIndexBox\">\n                                <h5>{this.state.uvIndex} kg/s^3</h5>\n                            </div>\n                            <div className=\"Box VisibilityBox\">\n                                <h5>{this.state.visibility} mi</h5>\n                            </div>\n                        </div>\n                    </div>\n                )}\n            </div>\n        );\n    }\n}\n\nexport default WeatherCard;","import React from \"react\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport WeatherCard from './WeatherCard.js'\n//\n\nclass App extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            city: null,\n            isLoading: false\n        }\n        this.card = React.createRef();\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.fetchCityWeather = this.fetchCityWeather.bind(this);\n    }\n\n    handleSubmit(event) {\n        event.preventDefault();\n        let city = new FormData(event.target).get(\"city\");\n        document.getElementById('cityInput').value = \"\";\n        this.fetchCityWeather(city);\n    }\n\n    fetchCityWeather(city) {\n        this.setState({isLoading : true});\n\n        fetch(\"https://wttr.in/\" + city + \"?format=j1\")\n            .then(response => response.json())\n            .then(data => {\n                const currData = data[\"current_condition\"];\n                const areaData = data[\"nearest_area\"];\n                const realCity = areaData[0][\"areaName\"][0][\"value\"] + \", \" + areaData[0][\"region\"][0][\"value\"] + \", \" + areaData[0][\"country\"][0][\"value\"];\n                this.card.current.updateCard(currData, realCity);\n                this.setState({isLoading : false});\n            })\n    }\n\n    render() {\n        return (\n            <div className=\"App bg-opacity-100\">\n                <h1>TempCaster</h1>\n                <form id=\"submitForm\" onSubmit={this.handleSubmit}>\n                    <label>City:</label>\n                    <input id=\"cityInput\" className=\"form-control-sm\" name=\"city\" type=\"text\" placeholder=\"Enter city here\" />\n                    <button className=\"btn btn-primary\" type=\"submit\">Submit</button>\n                </form>\n                {this.state.isLoading && <div id=\"loader\" className=\"loader\"/>}\n                <WeatherCard ref={this.card} />\n            </div>\n        );\n    }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}