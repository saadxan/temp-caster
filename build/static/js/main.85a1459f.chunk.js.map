{"version":3,"sources":["WeatherCard.js","App.js","reportWebVitals.js","index.js"],"names":["WeatherCard","props","state","temperature","cloudCover","humidity","precipitation","uvIndex","visibility","weatherCode","weatherDescription","realCity","updateCard","bind","currData","this","setState","className","React","Component","App","city","card","createRef","handleSubmit","fetchCityWeather","event","preventDefault","FormData","target","get","document","getElementById","value","fetch","then","response","json","data","areaData","current","onSubmit","id","name","type","ref","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"2RAmEeA,E,kDA9DX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACTC,YAAc,KACdC,WAAa,KACbC,SAAW,KACXC,cAAgB,KAChBC,QAAU,KACVC,WAAa,KACbC,YAAa,KACbC,mBAAoB,KACpBC,SAAU,WAEd,EAAKC,WAAa,EAAKA,WAAWC,KAAhB,gBAbH,E,8CAgBnB,SAAWC,EAAUH,GACjBI,KAAKC,SAAS,CACVb,YAAcW,EAAS,GAAT,OACdV,WAAaU,EAAS,GAAT,WACbT,SAAWS,EAAS,GAAT,SACXR,cAAgBQ,EAAS,GAAT,aAChBP,QAAUO,EAAS,GAAT,QACVN,WAAaM,EAAS,GAAT,gBACbL,YAAaK,EAAS,GAAT,YACbH,SAAUA,M,oBAIlB,WACI,OACI,8BAC6B,YAAxBI,KAAKb,MAAMS,UACR,gCACI,6BAAKI,KAAKb,MAAMS,WAChB,sBAAKM,UAAU,cAAf,UACI,qBAAKA,UAAU,qBAAf,SACI,+BAAKF,KAAKb,MAAMC,YAAhB,cAEJ,qBAAKc,UAAU,oBAAf,SACI,+BAAKF,KAAKb,MAAME,WAAhB,SAEJ,qBAAKa,UAAU,kBAAf,SACI,+BAAKF,KAAKb,MAAMG,SAAhB,YAEJ,qBAAKY,UAAU,uBAAf,SACI,+BAAKF,KAAKb,MAAMI,cAAhB,WAEJ,qBAAKW,UAAU,iBAAf,SACI,+BAAKF,KAAKb,MAAMK,QAAhB,eAEJ,qBAAKU,UAAU,oBAAf,SACI,+BAAKF,KAAKb,MAAMM,WAAhB,uB,GAtDNU,IAAMC,WCiDjBC,E,kDA5CX,WAAYnB,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACTmB,KAAM,MAEV,EAAKC,KAAOJ,IAAMK,YAClB,EAAKC,aAAe,EAAKA,aAAaX,KAAlB,gBACpB,EAAKY,iBAAmB,EAAKA,iBAAiBZ,KAAtB,gBAPT,E,gDAUnB,SAAaa,GACTA,EAAMC,iBACN,IAAIN,EAAO,IAAIO,SAASF,EAAMG,QAAQC,IAAI,QAC1CC,SAASC,eAAe,aAAaC,MAAQ,GAC7ClB,KAAKU,iBAAiBJ,K,8BAG1B,SAAiBA,GAAO,IAAD,OACnBa,MAAM,mBAAqBb,EAAO,cAC7Bc,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACF,IAAMxB,EAAWwB,EAAI,kBACfC,EAAWD,EAAI,aACf3B,EAAW4B,EAAS,GAAT,SAAwB,GAAxB,MAAsC,KAAOA,EAAS,GAAT,OAAsB,GAAtB,MAAoC,KAAOA,EAAS,GAAT,QAAuB,GAAvB,MACzG,EAAKjB,KAAKkB,QAAQ5B,WAAWE,EAAUH,Q,oBAInD,WACI,OACI,sBAAKM,UAAU,MAAf,UACI,4CACA,uBAAMwB,SAAU1B,KAAKS,aAArB,UACI,0CACI,uBAAOkB,GAAG,YAAYC,KAAK,OAAOC,KAAK,YAE3C,uBAAOA,KAAK,SAASX,MAAM,cAE/B,cAAC,EAAD,CAAaY,IAAK9B,KAAKO,c,GAzCrBJ,IAAMC,WCOT2B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBb,MAAK,YAAkD,IAA/Cc,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFzB,SAASC,eAAe,SAM1Bc,M","file":"static/js/main.85a1459f.chunk.js","sourcesContent":["import './WeatherCard.css';\nimport React from \"react\";\n\nclass WeatherCard extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            temperature : null,\n            cloudCover : null,\n            humidity : null,\n            precipitation : null,\n            uvIndex : null,\n            visibility : null,\n            weatherCode: null,\n            weatherDescription: null,\n            realCity: \"Nowhere\"\n        }\n        this.updateCard = this.updateCard.bind(this);\n    }\n\n    updateCard(currData, realCity) {\n        this.setState({\n            temperature : currData[0][\"temp_F\"],\n            cloudCover : currData[0][\"cloudcover\"],\n            humidity : currData[0][\"humidity\"],\n            precipitation : currData[0][\"precipInches\"],\n            uvIndex : currData[0][\"uvIndex\"],\n            visibility : currData[0][\"visibilityMiles\"],\n            weatherCode: currData[0][\"weatherCode\"],\n            realCity: realCity\n        });\n    }\n\n    render() {\n        return (\n            <div>\n                {this.state.realCity !== \"Nowhere\" && (\n                    <div>\n                        <h3>{this.state.realCity}</h3>\n                        <div className=\"WeatherCard\">\n                            <div className=\"Box TemperatureBox\">\n                                <h5>{this.state.temperature} ÂºF</h5>\n                            </div>\n                            <div className=\"Box CloudCoverBox\">\n                                <h5>{this.state.cloudCover}%</h5>\n                            </div>\n                            <div className=\"Box HumidityBox\">\n                                <h5>{this.state.humidity} %rh</h5>\n                            </div>\n                            <div className=\"Box PrecipitationBox\">\n                                <h5>{this.state.precipitation} in</h5>\n                            </div>\n                            <div className=\"Box UVIndexBox\">\n                                <h5>{this.state.uvIndex} kg/s^3</h5>\n                            </div>\n                            <div className=\"Box VisibilityBox\">\n                                <h5>{this.state.visibility} mi</h5>\n                            </div>\n                        </div>\n                    </div>\n                )}\n            </div>\n        );\n    }\n}\n\nexport default WeatherCard;","import './App.css';\nimport React from \"react\";\nimport WeatherCard from './WeatherCard.js'\n\n\nclass App extends React.Component {\n\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            city: null\n        }\n        this.card = React.createRef();\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.fetchCityWeather = this.fetchCityWeather.bind(this);\n    }\n\n    handleSubmit(event) {\n        event.preventDefault();\n        let city = new FormData(event.target).get(\"city\");\n        document.getElementById('cityInput').value = \"\";\n        this.fetchCityWeather(city);\n    }\n\n    fetchCityWeather(city) {\n        fetch(\"https://wttr.in/\" + city + \"?format=j1\")\n            .then(response => response.json())\n            .then(data => {\n                const currData = data[\"current_condition\"];\n                const areaData = data[\"nearest_area\"];\n                const realCity = areaData[0][\"areaName\"][0][\"value\"] + \", \" + areaData[0][\"region\"][0][\"value\"] + \", \" + areaData[0][\"country\"][0][\"value\"];\n                this.card.current.updateCard(currData, realCity);\n            })\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <h1>TempCaster</h1>\n                <form onSubmit={this.handleSubmit}>\n                    <label>City:\n                        <input id=\"cityInput\" name=\"city\" type=\"text\" />\n                    </label>\n                    <input type=\"submit\" value=\"Submit\" />\n                </form>\n                <WeatherCard ref={this.card} />\n            </div>\n        );\n    }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}