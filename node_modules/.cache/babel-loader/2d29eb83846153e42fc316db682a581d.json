{"ast":null,"code":"const axios = require('axios');\n\nconst {\n  url,\n  headers,\n  max_iter,\n  max_retries\n} = require('./constants');\n\nconst {\n  sleep,\n  getToken\n} = require('./utils');\n\nasync function image_search({\n  query,\n  moderate,\n  retries,\n  iterations\n}) {\n  let reqUrl = url + 'i.js';\n  let keywords = query;\n  let p = moderate ? 1 : -1; // by default moderate false\n\n  let attempt = 0;\n  if (!retries) retries = max_retries; // default to max if none provided\n\n  if (!iterations) iterations = max_iter; // default to max if none provided\n\n  let results = [];\n\n  try {\n    let token = await getToken(keywords);\n    let params = {\n      \"l\": \"wt-wt\",\n      \"o\": \"json\",\n      \"q\": keywords,\n      \"vqd\": token,\n      \"f\": \",,,\",\n      \"p\": \"\" + p\n    };\n    let data = null;\n    let itr = 0;\n\n    while (itr < iterations) {\n      while (true) {\n        try {\n          let response = await axios.get(reqUrl, {\n            params,\n            headers\n          });\n          data = response.data;\n          if (!data.results) throw \"No results\";\n          break;\n        } catch (error) {\n          console.error(error);\n          attempt += 1;\n\n          if (attempt > retries) {\n            return new Promise((resolve, reject) => {\n              resolve(results);\n            });\n          }\n\n          await sleep(5000);\n          continue;\n        }\n      }\n\n      results = [...results, ...data.results];\n\n      if (!data.next) {\n        return new Promise((resolve, reject) => {\n          resolve(results);\n        });\n      }\n\n      reqUrl = url + data[\"next\"];\n      itr += 1;\n      attempt = 0;\n    }\n  } catch (error) {\n    console.error(error);\n  }\n\n  return results;\n}\n\nasync function* image_search_generator({\n  query,\n  moderate,\n  retries,\n  iterations\n}) {\n  let reqUrl = url + 'i.js';\n  let keywords = query;\n  let p = moderate ? 1 : -1; // by default moderate false\n\n  let attempt = 0;\n  if (!retries) retries = max_retries; // default to max if none provided\n\n  if (!iterations) iterations = max_iter; // default to max if none provided\n\n  try {\n    let token = await getToken(keywords);\n    let params = {\n      \"l\": \"wt-wt\",\n      \"o\": \"json\",\n      \"q\": keywords,\n      \"vqd\": token,\n      \"f\": \",,,\",\n      \"p\": \"\" + p\n    };\n    let itr = 0;\n\n    while (itr < iterations) {\n      let data = null;\n\n      while (true) {\n        try {\n          let response = await axios.get(reqUrl, {\n            params,\n            headers\n          });\n          data = response.data;\n          if (!data.results) throw \"No results\";\n          break;\n        } catch (error) {\n          console.error(error);\n          attempt += 1;\n\n          if (attempt > retries) {\n            yield await new Promise((resolve, reject) => {\n              reject('attempt finished');\n            });\n          }\n\n          await sleep(5000);\n          continue;\n        }\n      }\n\n      yield await new Promise((resolve, reject) => {\n        resolve(data.results);\n      });\n      reqUrl = url + data[\"next\"];\n      itr += 1;\n      attempt = 0;\n    }\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nmodule.exports = {\n  image_search,\n  image_search_generator\n};","map":{"version":3,"sources":["/Users/saad/WebstormProjects/temp-caster/node_modules/duckduckgo-images-api/src/api.js"],"names":["axios","require","url","headers","max_iter","max_retries","sleep","getToken","image_search","query","moderate","retries","iterations","reqUrl","keywords","p","attempt","results","token","params","data","itr","response","get","error","console","Promise","resolve","reject","next","image_search_generator","module","exports"],"mappings":"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","sourcesContent":["const axios = require('axios');\r\nconst { url, headers, max_iter, max_retries } = require('./constants')\r\nconst { sleep, getToken } = require('./utils')\r\n\r\n\r\nasync function image_search({ query, moderate, retries, iterations }) {\r\n\r\n    let reqUrl = url + 'i.js';\r\n    let keywords = query\r\n    let p = moderate ? 1 : -1;      // by default moderate false\r\n    let attempt = 0;\r\n    if (!retries) retries = max_retries; // default to max if none provided\r\n    if (!iterations) iterations = max_iter; // default to max if none provided\r\n\r\n    let results = [];\r\n\r\n    try {\r\n\r\n        let token = await getToken(keywords);\r\n\r\n        let params = {\r\n            \"l\": \"wt-wt\",\r\n            \"o\": \"json\",\r\n            \"q\": keywords,\r\n            \"vqd\": token,\r\n            \"f\": \",,,\",\r\n            \"p\": \"\" + (p)\r\n        }\r\n\r\n        let data = null;\r\n        let itr = 0;\r\n\r\n\r\n        while (itr < iterations) {\r\n\r\n            while (true) {\r\n                try {\r\n\r\n                    let response = await axios.get(reqUrl, {\r\n                        params,\r\n                        headers\r\n                    })\r\n\r\n                    data = response.data;\r\n                    if (!data.results) throw \"No results\";\r\n                    break;\r\n\r\n                } catch (error) {\r\n                    console.error(error)\r\n                    attempt += 1;\r\n                    if (attempt > retries) {\r\n                        return new Promise((resolve, reject) => {\r\n                            resolve(results)\r\n                        });\r\n                    }\r\n                    await sleep(5000);\r\n                    continue;\r\n                }\r\n\r\n            }\r\n            \r\n            results = [...results, ...data.results]\r\n            if (!data.next) {\r\n                return new Promise((resolve, reject) => {\r\n                    resolve(results)\r\n                });\r\n            }\r\n            reqUrl = url + data[\"next\"];\r\n            itr += 1;\r\n            attempt = 0;\r\n        }\r\n\r\n    } catch (error) {\r\n        console.error(error);\r\n    }\r\n    return results;\r\n\r\n}\r\n\r\n\r\n\r\nasync function* image_search_generator({ query, moderate, retries, iterations }) {\r\n\r\n    let reqUrl = url + 'i.js';\r\n    let keywords = query\r\n    let p = moderate ? 1 : -1;      // by default moderate false\r\n    let attempt = 0;\r\n    if (!retries) retries = max_retries; // default to max if none provided\r\n    if (!iterations) iterations = max_iter; // default to max if none provided\r\n\r\n    \r\n\r\n    try {\r\n\r\n        let token = await getToken(keywords);\r\n\r\n        let params = {\r\n            \"l\": \"wt-wt\",\r\n            \"o\": \"json\",\r\n            \"q\": keywords,\r\n            \"vqd\": token,\r\n            \"f\": \",,,\",\r\n            \"p\": \"\" + (p)\r\n        }\r\n        \r\n        let itr = 0;\r\n\r\n\r\n        while (itr < iterations) {\r\n\r\n            let data = null;\r\n\r\n            while (true) {\r\n                try {\r\n\r\n                    let response = await axios.get(reqUrl, {\r\n                        params,\r\n                        headers\r\n                    })\r\n\r\n                    data = response.data;\r\n                    if (!data.results) throw \"No results\";\r\n                    break;\r\n\r\n                } catch (error) {\r\n                    console.error(error)\r\n                    attempt += 1;\r\n                    if (attempt > retries) {\r\n                        \r\n                        yield await new Promise((resolve, reject) => {                            \r\n                            reject('attempt finished')                            \r\n                        })\r\n\r\n                    }\r\n                    await sleep(5000);\r\n                    continue;\r\n                }\r\n\r\n            }\r\n            \r\n\r\n            yield await new Promise((resolve, reject) => {                \r\n                resolve(data.results)\r\n            })\r\n\r\n\r\n            reqUrl = url + data[\"next\"];\r\n            itr += 1;\r\n            attempt = 0;\r\n        }\r\n\r\n    } catch (error) {\r\n        console.error(error);\r\n    }    \r\n\r\n}\r\n\r\n\r\n\r\nmodule.exports = { image_search, image_search_generator };\r\n\r\n\r\n"]},"metadata":{},"sourceType":"script"}